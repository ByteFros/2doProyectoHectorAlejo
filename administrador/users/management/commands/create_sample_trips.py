"""
Comando de Django para crear viajes de prueba para empleados existentes.
Genera viajes en estado EN_REVISION con destinos reales (sin gastos).
"""
import random
from datetime import date, timedelta
from django.core.management.base import BaseCommand

from users.models import EmpleadoProfile, Viaje
from users.viajes.services import crear_dias_viaje


class Command(BaseCommand):
    help = "Crea viajes de prueba para empleados existentes con destinos reales"

    # Destinos reales con informaci√≥n completa
    DESTINOS_NACIONALES = [
        {
            'ciudad': 'Madrid',
            'pais': 'Espa√±a',
            'empresas': ['Cliente Tecnol√≥gico Madrid', 'Banco Central', 'Consultora Ib√©rica', 'Retail Solutions'],
        },
        {
            'ciudad': 'Barcelona',
            'pais': 'Espa√±a',
            'empresas': ['Startup Barcelona Tech', 'Port de Barcelona', 'Mobile World Congress', 'Design Studio BCN'],
        },
        {
            'ciudad': 'Valencia',
            'pais': 'Espa√±a',
            'empresas': ['Puerto de Valencia', 'Ceramics Industry', 'Tourism Valencia', 'Agriculture Tech'],
        },
        {
            'ciudad': 'Sevilla',
            'pais': 'Espa√±a',
            'empresas': ['Turismo Sevilla', 'Construcci√≥n del Sur', 'Agro Andaluc√≠a', 'Logistics Sevilla'],
        },
        {
            'ciudad': 'Bilbao',
            'pais': 'Espa√±a',
            'empresas': ['Industrias del Norte', 'Guggenheim Foundation', 'Naval Engineering', 'Banco Bilbao'],
        },
        {
            'ciudad': 'M√°laga',
            'pais': 'Espa√±a',
            'empresas': ['Tech Park M√°laga', 'Costa del Sol Tourism', 'Port Authority', 'Andalusia Tech'],
        },
        {
            'ciudad': 'Zaragoza',
            'pais': 'Espa√±a',
            'empresas': ['Logistics Hub Arag√≥n', 'Opel Espa√±a', 'Agriculture Coop', 'Tech Innovation Zaragoza'],
        },
        {
            'ciudad': 'Alicante',
            'pais': 'Espa√±a',
            'empresas': ['Puerto de Alicante', 'Tourism Costa Blanca', 'Wine Industry', 'Mediterranean Trade'],
        },
    ]

    DESTINOS_INTERNACIONALES = [
        {
            'ciudad': 'Par√≠s',
            'pais': 'Francia',
            'empresas': ['Air France', 'L\'Or√©al', 'Renault Group', 'Orange Telecom'],
        },
        {
            'ciudad': 'Londres',
            'pais': 'Reino Unido',
            'empresas': ['Financial Services UK', 'Tech London', 'British Airways', 'Consulting London'],
        },
        {
            'ciudad': 'Berl√≠n',
            'pais': 'Alemania',
            'empresas': ['Siemens', 'Deutsche Telekom', 'Berlin Startup Hub', 'Manufacturing Solutions'],
        },
        {
            'ciudad': 'Roma',
            'pais': 'Italia',
            'empresas': ['Leonardo SpA', 'Fashion Milano', 'Tourism Italia', 'Food Industry Roma'],
        },
        {
            'ciudad': '√Åmsterdam',
            'pais': 'Pa√≠ses Bajos',
            'empresas': ['ING Bank', 'Philips', 'Port of Amsterdam', 'Dutch Tech'],
        },
        {
            'ciudad': 'Bruselas',
            'pais': 'B√©lgica',
            'empresas': ['European Commission', 'NATO Headquarters', 'Belgian Consulting', 'EU Parliament'],
        },
        {
            'ciudad': 'Lisboa',
            'pais': 'Portugal',
            'empresas': ['Web Summit', 'Port of Lisbon', 'Portuguese Tourism', 'Tech Lisboa'],
        },
        {
            'ciudad': 'Dubl√≠n',
            'pais': 'Irlanda',
            'empresas': ['Google EMEA', 'Facebook Europe', 'Irish Tech Hub', 'Finance Dublin'],
        },
        {
            'ciudad': 'Mil√°n',
            'pais': 'Italia',
            'empresas': ['Fashion Week Milano', 'Banca Intesa', 'Design Milano', 'Automotive Italia'],
        },
        {
            'ciudad': 'M√∫nich',
            'pais': 'Alemania',
            'empresas': ['BMW Group', 'Siemens Munich', 'Oktoberfest Organization', 'Tech Munich'],
        },
        {
            'ciudad': 'Z√∫rich',
            'pais': 'Suiza',
            'empresas': ['Credit Suisse', 'UBS', 'Swiss Finance', 'Pharma Zurich'],
        },
        {
            'ciudad': 'Viena',
            'pais': 'Austria',
            'empresas': ['OPEC Headquarters', 'Vienna Insurance', 'Cultural Vienna', 'Austrian Tech'],
        },
    ]

    MOTIVOS = [
        'Reuni√≥n con cliente para cierre de proyecto',
        'Conferencia anual del sector',
        'Visita a instalaciones de proveedor',
        'Presentaci√≥n de nueva propuesta comercial',
        'Training t√©cnico especializado',
        'Auditor√≠a de calidad en sede cliente',
        'Negociaci√≥n de contrato marco',
        'Workshop de innovaci√≥n tecnol√≥gica',
        'Reuni√≥n de coordinaci√≥n con equipo remoto',
        'Feria comercial del sector',
        'Due diligence de posible adquisici√≥n',
        'Kick-off de nuevo proyecto',
        'Reuni√≥n de seguimiento trimestral',
        'Presentaci√≥n de resultados anuales',
        'Sesi√≥n de formaci√≥n para cliente',
        'Evaluaci√≥n de nueva oficina',
        'Congreso internacional',
        'Reuni√≥n con stakeholders clave',
        'Visita t√©cnica a planta de producci√≥n',
        'Evento de networking empresarial',
    ]

    def add_arguments(self, parser):
        parser.add_argument(
            '--trips-per-employee',
            type=int,
            default=5,
            help='N√∫mero de viajes a crear por empleado (default: 5)',
        )
        parser.add_argument(
            '--months-back',
            type=int,
            default=12,
            help='Meses hacia atr√°s para generar viajes (default: 12)',
        )
        parser.add_argument(
            '--clear',
            action='store_true',
            help='Elimina todos los viajes existentes antes de crear nuevos',
        )

    def handle(self, *args, **options):
        trips_per_employee = options['trips_per_employee']
        months_back = options['months_back']

        if options['clear']:
            self.stdout.write(self.style.WARNING('\n‚ö†Ô∏è  Limpiando viajes existentes...'))
            deleted_count = Viaje.objects.all().delete()[0]
            self.stdout.write(self.style.SUCCESS(f'‚úì {deleted_count} viajes eliminados\n'))

        self.stdout.write(self.style.SUCCESS('='*70))
        self.stdout.write(self.style.SUCCESS('GENERANDO VIAJES DE PRUEBA'))
        self.stdout.write(self.style.SUCCESS('='*70 + '\n'))

        # Obtener todos los empleados
        empleados = EmpleadoProfile.objects.select_related('empresa', 'user').all()

        if not empleados.exists():
            self.stdout.write(
                self.style.ERROR('‚ùå No se encontraron empleados en la base de datos.')
            )
            self.stdout.write(
                self.style.WARNING('   Ejecuta primero: python manage.py load_sample_data')
            )
            return

        total_empleados = empleados.count()
        self.stdout.write(f'üìä Se encontraron {total_empleados} empleados')
        self.stdout.write(f'üìÖ Generando {trips_per_employee} viajes por empleado')
        self.stdout.write(f'üóìÔ∏è  Rango de fechas: √∫ltimos {months_back} meses\n')

        # Generar viajes
        viajes_creados = 0
        for idx, empleado in enumerate(empleados, 1):
            self.stdout.write(
                f'üë§ [{idx}/{total_empleados}] Generando viajes para '
                f'{empleado.nombre} {empleado.apellido} ({empleado.empresa.nombre_empresa})'
            )

            viajes_empleado = self._create_trips_for_employee(
                empleado,
                trips_per_employee,
                months_back
            )
            viajes_creados += viajes_empleado

        # Resumen final
        self._print_summary(total_empleados, viajes_creados, trips_per_employee)

    def _create_trips_for_employee(self, empleado, count, months_back):
        """Crea viajes aleatorios para un empleado"""
        viajes_creados = 0

        for i in range(count):
            # Decidir si es nacional o internacional (70% nacional, 30% internacional)
            es_internacional = random.random() > 0.7

            if es_internacional:
                destino_info = random.choice(self.DESTINOS_INTERNACIONALES)
            else:
                destino_info = random.choice(self.DESTINOS_NACIONALES)

            # Generar fechas en el pasado
            fecha_inicio, fecha_fin, dias = self._generate_random_dates(months_back)

            # Seleccionar empresa visitada y motivo
            empresa_visitada = random.choice(destino_info['empresas'])
            motivo = random.choice(self.MOTIVOS)

            # Estado del viaje
            estado = 'EN_REVISION'

            # Construir destino
            destino = f"{destino_info['ciudad']}, {destino_info['pais']}"

            try:
                viaje = Viaje.objects.create(
                    empleado=empleado,
                    empresa=empleado.empresa,
                    destino=destino,
                    ciudad=destino_info['ciudad'],
                    pais=destino_info['pais'],
                    es_internacional=es_internacional,
                    fecha_inicio=fecha_inicio,
                    fecha_fin=fecha_fin,
                    dias_viajados=dias,
                    estado=estado,
                    empresa_visitada=empresa_visitada,
                    motivo=motivo
                )

                # Crear DiaViaje para viajes revisados o en revisi√≥n
                dias_creados = crear_dias_viaje(viaje)
                # Algunos d√≠as se marcar√°n como no exentos para generar variedad
                for dia in dias_creados:
                    if random.random() < 0.3:
                        dia.exento = False
                        dia.save(update_fields=["exento"])

                viajes_creados += 1

                # S√≠mbolo seg√∫n tipo de viaje
                simbolo = '‚úàÔ∏è' if es_internacional else 'üöÑ'

                self.stdout.write(
                    f'  {simbolo} {i+1}/{count} - {destino} '
                    f'({fecha_inicio} ‚Üí {fecha_fin}, {dias}d) - {estado}'
                )

            except Exception as e:
                self.stdout.write(
                    self.style.WARNING(
                        f'  ‚ö†Ô∏è  Error al crear viaje {i+1}: {str(e)}'
                    )
                )

        return viajes_creados

    def _generate_random_dates(self, months_back):
        """Genera fechas aleatorias de viaje en el pasado"""
        today = date.today()

        # Fecha de inicio aleatoria en los √∫ltimos N meses
        days_back = random.randint(30, months_back * 30)
        fecha_inicio = today - timedelta(days=days_back)

        # Duraci√≥n del viaje (1-7 d√≠as, con peso hacia duraciones cortas)
        duracion_options = [1, 1, 2, 2, 2, 3, 3, 4, 5, 7]
        dias = random.choice(duracion_options)
        fecha_fin = fecha_inicio + timedelta(days=dias - 1)

        return fecha_inicio, fecha_fin, dias

    def _get_random_estado(self):
        """Retorna un estado aleatorio con pesos"""
        # 80% revisados, 20% en revisi√≥n
        return 'EN_REVISION'

    def _print_summary(self, total_empleados, viajes_creados, trips_per_employee):
        """Imprime resumen de los viajes creados"""
        self.stdout.write('\n' + '='*70)
        self.stdout.write(self.style.SUCCESS('RESUMEN DE VIAJES GENERADOS'))
        self.stdout.write('='*70)

        self.stdout.write(f'\nüë• Empleados procesados: {total_empleados}')
        self.stdout.write(f'‚úàÔ∏è  Total de viajes creados: {viajes_creados}')
        self.stdout.write(f'üìä Promedio por empleado: {viajes_creados / total_empleados:.1f}')

        # Estad√≠sticas por estado
        estados_stats = {}
        for estado, _ in Viaje.ESTADO_CHOICES:
            count = Viaje.objects.filter(estado=estado).count()
            if count > 0:
                estados_stats[estado] = count

        self.stdout.write('\nüìà Distribuci√≥n por estado:')
        for estado, count in estados_stats.items():
            porcentaje = (count / viajes_creados * 100) if viajes_creados > 0 else 0
            self.stdout.write(f'   ‚Ä¢ {estado}: {count} ({porcentaje:.1f}%)')

        # Estad√≠sticas nacionales vs internacionales
        nacionales = Viaje.objects.filter(es_internacional=False).count()
        internacionales = Viaje.objects.filter(es_internacional=True).count()

        self.stdout.write('\nüåç Distribuci√≥n geogr√°fica:')
        if viajes_creados > 0:
            self.stdout.write(f'   ‚Ä¢ Viajes nacionales: {nacionales} ({nacionales/viajes_creados*100:.1f}%)')
            self.stdout.write(f'   ‚Ä¢ Viajes internacionales: {internacionales} ({internacionales/viajes_creados*100:.1f}%)')
        else:
            self.stdout.write('   ‚Ä¢ Sin viajes generados')

        # Top 5 destinos m√°s visitados
        from django.db.models import Count
        top_destinos = (
            Viaje.objects
            .values('ciudad', 'pais')
            .annotate(count=Count('id'))
            .order_by('-count')[:5]
        )

        self.stdout.write('\nüèÜ Top 5 destinos m√°s visitados:')
        for idx, destino in enumerate(top_destinos, 1):
            self.stdout.write(
                f'   {idx}. {destino["ciudad"]}, {destino["pais"]} - {destino["count"]} viajes'
            )

        # Estad√≠sticas de d√≠as
        from users.models import DiaViaje
        total_dias = DiaViaje.objects.count()
        dias_exentos = DiaViaje.objects.filter(exento=True).count()
        dias_no_exentos = DiaViaje.objects.filter(exento=False).count()

        self.stdout.write('\nüìÖ Estad√≠sticas de d√≠as de viaje:')
        self.stdout.write(f'   ‚Ä¢ Total de d√≠as creados: {total_dias}')
        if total_dias > 0:
            self.stdout.write(f'   ‚Ä¢ D√≠as exentos: {dias_exentos} ({dias_exentos/total_dias*100:.1f}%)')
            self.stdout.write(f'   ‚Ä¢ D√≠as no exentos: {dias_no_exentos} ({dias_no_exentos/total_dias*100:.1f}%)')
        else:
            self.stdout.write('   ‚Ä¢ No se han generado d√≠as de viaje')

        self.stdout.write('\n' + '='*70)
        self.stdout.write(self.style.SUCCESS('‚úì Viajes generados exitosamente'))
        self.stdout.write('='*70 + '\n')

        self.stdout.write(self.style.WARNING('üí° NOTAS:'))
        self.stdout.write('   ‚Ä¢ Los DiaViaje han sido creados e inicializados')
        self.stdout.write('   ‚Ä¢ Los viajes NO tienen gastos asociados todav√≠a')
        self.stdout.write('   ‚Ä¢ Para agregar gastos, ejecuta: python manage.py create_sample_expenses')
        self.stdout.write('   ‚Ä¢ La mayor√≠a de viajes est√°n en estado REVISADO')
        self.stdout.write('   ‚Ä¢ 70% de viajes con d√≠as exentos, 30% con d√≠as no exentos')
        self.stdout.write('   ‚Ä¢ Fechas generadas en los √∫ltimos 12 meses por defecto\n')
